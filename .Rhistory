presidentialForecast<-presidentialForecast[order(presidentialForecast$Year,decreasing=TRUE), ]
names(presidentialForecast)[2]<-"LewisBeck"
# Generates table showing the last X elections (as selectd by the user)
output$view <- renderTable({
head(presidentialForecast, n=input$obs)
})
# Plot the election results and a specific forecast
output$plot <- renderPlot({
if (input$forecast=="Actual"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual"), pch=c("o"), col=c("black"))
} else if (input$forecast=="Campbell"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Campbell, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Campbell"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Lewis-Beck"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$LewisBeck, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Lewis-Beck"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="EWT2C2"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$EWT2C2, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "EWT2C2"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Fair"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Fair, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Fair"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Hibbs"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Hibbs, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Hibbs"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Abramowitz"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Abramowitz, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Abramowitz"), pch=c("o","x"), col=c("black", "blue"))
}
})
#
output$plot_clickinfo <- renderText({
paste0("Year=", round(input$plot_click$x+1952), "\nVote Share, Percentage=", round(input$plot_click$y, digits=4))
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("Presidential Forecast"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Include clarifying text ----
helpText("Here are the results of presidential forecasts from 1952-2008"),
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Last X elections to view:",
value = 15),
# Input: Selector for choosing specific forecast to add to plot ----
selectInput(inputId = "forecast",
label = "Choose a forecast to plot:",
choices = c("Actual","Campbell", "Lewis-Beck", "EWT2C2", "Fair",
"Hibbs", "Abramowitz"))
),
# Main panel for displaying outputs ----
mainPanel(
#
tableOutput("view"),
#
plotOutput("plot", click="plot_click"),
#
h4("Clicked points"),
verbatimTextOutput("plot_clickinfo")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Loads dataset, sort in descending order
library(EBMAforecast)
data("presidentialForecast")
presidentialForecast$Year <- as.numeric(row.names(presidentialForecast))
presidentialForecast<-presidentialForecast[order(presidentialForecast$Year,decreasing=TRUE), ]
names(presidentialForecast)[2]<-"LewisBeck"
# Generates table showing the last X elections (as selectd by the user)
output$view <- renderTable({
head(presidentialForecast, n=input$obs)
})
# Plot the election results and a specific forecast
output$plot <- renderPlot({
if (input$forecast=="Actual"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual"), pch=c("o"), col=c("black"))
} else if (input$forecast=="Campbell"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Campbell, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Campbell"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Lewis-Beck"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$LewisBeck, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Lewis-Beck"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="EWT2C2"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$EWT2C2, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "EWT2C2"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Fair"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Fair, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Fair"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Hibbs"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Hibbs, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Hibbs"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Abramowitz"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Abramowitz, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Abramowitz"), pch=c("o","x"), col=c("black", "blue"))
}
})
#
output$plot_clickinfo <- renderText({
paste0("Year=", round(input$plot_click$x+1952), "\nVote Share, Percentage=", input$plot_click$y)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("Presidential Forecast"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Include clarifying text ----
helpText("Here are the results of presidential forecasts from 1952-2008"),
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Last X elections to view:",
value = 15),
# Input: Selector for choosing specific forecast to add to plot ----
selectInput(inputId = "forecast",
label = "Choose a forecast to plot:",
choices = c("Actual","Campbell", "Lewis-Beck", "EWT2C2", "Fair",
"Hibbs", "Abramowitz"))
),
# Main panel for displaying outputs ----
mainPanel(
#
tableOutput("view"),
#
plotOutput("plot", click="plot_click"),
#
h4("Clicked points"),
verbatimTextOutput("plot_clickinfo")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Loads dataset, sort in descending order
library(EBMAforecast)
data("presidentialForecast")
presidentialForecast$Year <- as.numeric(row.names(presidentialForecast))
presidentialForecast<-presidentialForecast[order(presidentialForecast$Year,decreasing=TRUE), ]
names(presidentialForecast)[2]<-"LewisBeck"
# Generates table showing the last X elections (as selectd by the user)
output$view <- renderTable({
head(presidentialForecast, n=input$obs)
})
# Plot the election results and a specific forecast
output$plot <- renderPlot({
if (input$forecast=="Actual"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual"), pch=c("o"), col=c("black"))
} else if (input$forecast=="Campbell"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Campbell, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Campbell"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Lewis-Beck"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$LewisBeck, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Lewis-Beck"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="EWT2C2"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$EWT2C2, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "EWT2C2"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Fair"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Fair, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Fair"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Hibbs"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Hibbs, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Hibbs"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Abramowitz"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Abramowitz, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Abramowitz"), pch=c("o","x"), col=c("black", "blue"))
}
})
#
output$plot_clickinfo <- renderText({
paste0("Year=", round(4*input$plot_click$x+1952), "\nVote Share, Percentage=", input$plot_click$y)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("Presidential Forecast"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Include clarifying text ----
helpText("Here are the results of presidential forecasts from 1952-2008"),
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Last X elections to view:",
value = 15),
# Input: Selector for choosing specific forecast to add to plot ----
selectInput(inputId = "forecast",
label = "Choose a forecast to plot:",
choices = c("Actual","Campbell", "Lewis-Beck", "EWT2C2", "Fair",
"Hibbs", "Abramowitz"))
),
# Main panel for displaying outputs ----
mainPanel(
#
tableOutput("view"),
#
plotOutput("plot", click="plot_click"),
#
h4("Clicked points"),
verbatimTextOutput("plot_clickinfo")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Loads dataset, sort in descending order
library(EBMAforecast)
data("presidentialForecast")
presidentialForecast$Year <- as.numeric(row.names(presidentialForecast))
presidentialForecast<-presidentialForecast[order(presidentialForecast$Year,decreasing=TRUE), ]
names(presidentialForecast)[2]<-"LewisBeck"
# Generates table showing the last X elections (as selectd by the user)
output$view <- renderTable({
head(presidentialForecast, n=input$obs)
})
# Plot the election results and a specific forecast
output$plot <- renderPlot({
if (input$forecast=="Actual"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual"), pch=c("o"), col=c("black"))
} else if (input$forecast=="Campbell"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Campbell, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Campbell"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Lewis-Beck"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$LewisBeck, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Lewis-Beck"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="EWT2C2"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$EWT2C2, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "EWT2C2"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Fair"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Fair, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Fair"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Hibbs"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Hibbs, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Hibbs"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Abramowitz"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Abramowitz, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Abramowitz"), pch=c("o","x"), col=c("black", "blue"))
}
})
#
output$plot_clickinfo <- renderText({
paste0("Year=", round(4*input$plot_click$x+1948), "\nVote Share, Percentage=", input$plot_click$y)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("Presidential Forecast"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Include clarifying text ----
helpText("Here are the results of presidential forecasts from 1952-2008"),
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Last X elections to view:",
value = 15),
# Input: Selector for choosing specific forecast to add to plot ----
selectInput(inputId = "forecast",
label = "Choose a forecast to plot:",
choices = c("Actual","Campbell", "Lewis-Beck", "EWT2C2", "Fair",
"Hibbs", "Abramowitz"))
),
# Main panel for displaying outputs ----
mainPanel(
# Display table of data
tableOutput("view"),
# Display plot
plotOutput("plot", click="plot_click"),
# Display x and y coordinates of clicked point
h4("Clicked points"),
verbatimTextOutput("plot_clickinfo")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Loads dataset, sort in descending order
library(EBMAforecast)
data("presidentialForecast")
presidentialForecast$Year <- as.numeric(row.names(presidentialForecast))
presidentialForecast<-presidentialForecast[order(presidentialForecast$Year,decreasing=TRUE), ]
names(presidentialForecast)[2]<-"LewisBeck"
# Generates table showing the last X elections (as selectd by the user)
output$view <- renderTable({
head(presidentialForecast, n=input$obs)
})
# Plot the election results and a specific forecast
output$plot <- renderPlot({
if (input$forecast=="Actual"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual"), pch=c("o"), col=c("black"))
} else if (input$forecast=="Campbell"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Campbell, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Campbell"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Lewis-Beck"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$LewisBeck, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Lewis-Beck"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="EWT2C2"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$EWT2C2, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "EWT2C2"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Fair"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Fair, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Fair"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Hibbs"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Hibbs, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Hibbs"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Abramowitz"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Abramowitz, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Abramowitz"), pch=c("o","x"), col=c("black", "blue"))
}
})
# Prints point clicked, x = year, y = vote share percentage
output$plot_clickinfo <- renderText({
paste0("Year=", round(4*input$plot_click$x+1948), "\nVote Share, Percentage=", input$plot_click$y)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(dplyr)
library(ggplot2)
## 1) Import dataset
setwd("~/Documents/GitHub/PS7")
crimeData <- read.csv("March2018.csv")
## 2) Compute number of crimes per day, by type of crime
crimeData<-mutate(crimeData, Date=substr(DateOccur,1,10))   # obtains date of each crime
crimeData$Date<-as.Date(crimeData$Date, "%m/%d/%Y")
crimeData$March2018<-(format(crimeData$Date, "%Y-%m")=="2018-03")   # obtains month of each crime
# categorizes each type of crime (see pg 6 of FAQ in github for explanation of this method of categorization)
unique(crimeData$Crime)
crimeData$crimeType<-""
for (i in 1:nrow(crimeData)){
if (crimeData$Crime[i]==10000){
crimeData$crimeType[i]<-"Homicide"
} else if (crimeData$Crime[i]>=20000 & crimeData$Crime[i]<30000) {
crimeData$crimeType[i]<-"Rape"
} else if (crimeData$Crime[i]>=30000 & crimeData$Crime[i]<40000) {
crimeData$crimeType[i]<-"Robbery"
} else if (crimeData$Crime[i]>=40000 & crimeData$Crime[i]<50000) {
crimeData$crimeType[i]<-"Aggravated Assault"
} else if (crimeData$Crime[i]>=50000 & crimeData$Crime[i]<60000) {
crimeData$crimeType[i]<-"Robbery"
} else if (crimeData$Crime[i]>=60000 & crimeData$Crime[i]<70000) {
crimeData$crimeType[i]<-"Larcency"
} else if (crimeData$Crime[i]>=70000 & crimeData$Crime[i]<80000) {
crimeData$crimeType[i]<-"Vehicle Theft"
} else if (crimeData$Crime[i]>=80000 & crimeData$Crime[i]<90000) {
crimeData$crimeType[i]<-"Arson"
} else if (crimeData$Crime[i]>=90000 & crimeData$Crime[i]<100000) {
crimeData$crimeType[i]<-"Simple Assault"
} else if (crimeData$Crime[i]>=100000 & crimeData$Crime[i]<110000) {
crimeData$crimeType[i]<-"Forgery"
} else if (crimeData$Crime[i]>=110000 & crimeData$Crime[i]<120000) {
crimeData$crimeType[i]<-"Fraud"
} else if (crimeData$Crime[i]>=120000 & crimeData$Crime[i]<130000) {
crimeData$crimeType[i]<-"Embezzlement"
} else if (crimeData$Crime[i]>=130000 & crimeData$Crime[i]<140000) {
crimeData$crimeType[i]<-"Stolen Property"
} else if (crimeData$Crime[i]>=140000 & crimeData$Crime[i]<150000) {
crimeData$crimeType[i]<-"Destruction of Property"
} else if (crimeData$Crime[i]>=150000 & crimeData$Crime[i]<160000) {
crimeData$crimeType[i]<-"Weapons Related"
} else if (crimeData$Crime[i]>=170000 & crimeData$Crime[i]<180000) {
crimeData$crimeType[i]<-"Sex Related Offence"
} else if (crimeData$Crime[i]>=180000 & crimeData$Crime[i]<190000) {
crimeData$crimeType[i]<-"Drug Possession/Sale"
} else if (crimeData$Crime[i]>=200000 & crimeData$Crime[i]<210000) {
crimeData$crimeType[i]<-"Family & Child Crime"
} else if (crimeData$Crime[i]>=210000 & crimeData$Crime[i]<220000) {
crimeData$crimeType[i]<-"DUI"
} else if (crimeData$Crime[i]>=220000 & crimeData$Crime[i]<230000) {
crimeData$crimeType[i]<-"Liquor Related"
} else if (crimeData$Crime[i]>=240000 & crimeData$Crime[i]<250000) {
crimeData$crimeType[i]<-"Disorderly Conduct"
} else if (crimeData$Crime[i]>=250000 & crimeData$Crime[i]<260000) {
crimeData$crimeType[i]<-"Loitering"
} else if (crimeData$Crime[i]>=260000) {
crimeData$crimeType[i]<-"All Others"
}
}
# counts number of each type of crime per day,
crimeDayType <- crimeData %>%
group_by(Date, crimeType) %>%
summarise(count=n())
crimeDayType
